<?php 

/**
 * @copyright (c) 2020-2021 Forms v1.0 Cooked by nielsoffice
 *
 * Forms v1.0 free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 *
 * @category  CrownPHPExtend - core noHTML
 * @package   - corePHP ( purePHP / no html for Back End PHP DEVELOPER/PROGRAMMER)
 *            - FormBuilder() Create form dynamically beautiful shorten codes
 *            - FormValidation() Validate form validation in just a minutes
 *            - Front End Framework | Bootstrap/Foundation/Materialize
 *            - Enjoy free templates
 *            - Docx/Reference
 *            
 * @author    nielfernandez <nieldigitalsolution@gmail.com>
 * @license   http://opensource.org/licenses/gpl-3.0.html GNU Public License
 * @link      https://github.com/nielsofficeofficial/crownPHPEXTEND
 * @link      https://github.com/nielsofficeofficial/crownPHPEXTEND/blob/master/README.md
 * @link      https://www.facebook.com/nielsofficeofficial
 * @version   Beta v1.0-master
 *
 */

class Form extends Html {
  
/**
  **
  ** @var @name is the form field name 
  ** CROWN PHP Framework dynamic php form Library
  ** cooked by nielsoffice  
  **  
  **/
 static private $name;

 /**
  **
  ** @var @value is the form field value 
  ** CROWN PHP Framework dynamic php form Library
  ** cooked by nielsoffice
  ** 
  **/
 static private $value;

  /**
  **
  ** @var @type is the form field type 
  ** CROWN PHP Framework dynamic php form Library
  ** cooked by nielsoffice
  **   
  **/
 static private $type;

 /**
  **
  ** @var @place_holder is the form field place holder 
  ** CROWN PHP Framework dynamic php form Library
  ** cooked by nielsoffice
  **   
  **/
 static private $place_holder;

 /**
  **
  ** @var @label is the form field label 
  ** CROWN PHP Framework dynamic php form Library
  ** cooked by nielsoffice
  **   
  **/
 static private $label;

 /**
  **
  ** @var @loop and name form field HTML
  ** In how many loop same as name suffix count BEGIN TO 1++ 
  ** CROWN PHP Framework dynamic php form Library
  ** cooked by nielsoffice
  **   
  **/
 static private $loopsfx;  

 public function __construct() {

   html::_PERFORM(self::__getFILE('html.static.class.php'));   
 
 }

 /**
  **
  ** @var CONST VAR field type accordingly  
  ** CROWN PHP Framework dynamic php form Library
  ** cooked by nielsoffice
  **   
  **/
  CONST DEFINED_FIELD_AS_TYPE_CONTENT     = 'textarea';
  CONST DEFINED_FIELD_AS_TYPE_TEXT        = 'text';
  CONST DEFINED_FIELD_AS_TYPE_NUMBER      = 'number';
  CONST DEFINED_FIELD_AS_TYPE_SEARCH      = 'search';  
  CONST DEFINED_FIELD_AS_TYPE_CHECKBOX    = 'checkbox';
  CONST DEFINED_FIELD_AS_TYPE_RADIO       = 'radio';
  CONST DEFINED_FIELD_AS_TYPE_TIME        = 'time';
  CONST DEFINED_FIELD_AS_TYPE_DATE        = 'date';
  CONST DEFINED_FIELD_AS_TYPE_DATETIME    = 'datetime'; 
  CONST DEFINED_FIELD_AS_TYPE_DTIME_LOCAL = 'datetime-local';  
  CONST DEFINED_FIELD_AS_TYPE_MONTH       = 'month';
  CONST DEFINED_FIELD_AS_TYPE_WEEK        = 'week';    
  CONST DEFINED_FIELD_AS_TYPE_COLOR       = 'color';
  CONST DEFINED_FIELD_AS_TYPE_RAGE        = 'rage'; 
  CONST DEFINED_FIELD_AS_TYPE_URL         = 'url';    
  CONST DEFINED_FIELD_AS_TYPE_EMAIL       = 'email';
  CONST DEFINED_FIELD_AS_TYPE_PASSWORD    = 'password';  
  CONST DEFINED_FIELD_AS_TYPE_UPLOAD      = 'file';  
  CONST DEFINED_FIELD_AS_TYPE_HIDDEN      = 'hidden'; 
  CONST DEFINED_FIELD_AS_TYPE_BUTTON      = 'button';
  CONST DEFINED_FIELD_AS_TYPE_SUBMIT      = 'submit';
  CONST DEFINED_FIELD_AS_TYPE_DISABLE     = 'disabled';
  CONST DEFINED_FIELD_AS_ATTR_TYPE        = 'type';
  CONST DEFINED_FIELD_AS_ATTR_NAME        = 'name';  
  CONST DEFINED_FIELD_AS_ATTR_PLACEHOLDER = 'placeholder';
  CONST DEFINED_FIELD_AS_ATTR_VALUE       = 'value';  
  CONST DEFINED_FIELD_AS_ATTR_ID          = 'id';  
  CONST DEFINED_FIELD_AS_ATTR_CLASS       = 'class';      

 
  static protected function _name($name)   {  return self::$name  = $name;   }  // set return name
  static protected function _value($value) {  return self::$value = $value;  }  // set return value
  static protected function _type($type)   {  return self::$type  = $type;   }  // set return type
  static protected function _placeholder($placeholder) { return self::$place_holder = $placeholder; } // set return placeholder
  static protected function _label($label)             { return self::$label        = $label; }  // set return label
  static protected function _loopsfx($loopsfx)         { return self::$loopsfx      = $loopsfx; } // set return loop and name multi field
  

 	/**
	 ** @method Single form fields no loop
   ** @static form single attribute name=""
   ** @static form single attribute placeholder=""
   ** NO additional html attributes only defualt
   ** NO parents html container only fields NO LOOP
	 **/ 
 final static public function field_single_input($type=null,$name=null,$value=null,$placeholder=null,$label=null,$id=null,$class=null) {
    
   # CALLING SINGLE INPUT FIELD
   # form::field_single_input('text',$name,$value,$placeholder,$label,$id,$class);
   # html::_PERFORM(form::field_single_input('text','form',NULL,NULL,'User_name:',NULL,NULL));
  
   if ($type === 'TEXTAREA' || $type === 'textarea') 
   {

    html::_PERFORM("crown_error! Use : field_single_textarea(); instead ");  
    
    } else {

    return self::__crown_form_builder($type,$name,$value,$placeholder,$label,$id,$class);   
    
    }
 
 }

 

  /**
   ** @method  fields input loop and name attribute
   ** No loop form field it self only attribues
   **/ 
  static public function field_input($attr = [], $id=null, $class=null) {
  
    # OUTPUT:
    # <label>$label</label>    
    # <input cus_attr1="val1" cus_attr2="val2" type="{$type}" $name="{$name}" $placeholer="{$placeholder}" $id="{$id}" $class="{$class}" />
    
    # CALLIN INPUT FIELD 
    #    $attrs = array(
    #
    #    'form_attr'    => array('type'=>'input','name'=>'name','placeholder'=>'pHolder','label'=>'label'),
    #    'custom_attr'  => array( 
    #          
    #     'attr_name' => array('name_1','name_2','name_3'),
    #     'attr_val'  => array('attr_1','attr_2','attr_3')
    #    )
    # );
   
    # field_input($attr = [], $id, $class) 
    # html::_PERFORM(form::field_input($attrs, 'my_id', 'my_class'));

    return self::fi_crown_form_builder_html_attr($attr,$id,$class);
  
  }

	/**
	 ** @method  multi fields input loop and attributes
   ** @static  custom addional attributes
   **
	 **/ 
	static public function field_multi_input($attr = [], $id=null, $class=null) {
   
    $set_merge_html_multi_fields    = "";

    $set_merge_html_multi_fields   .= parent::_getBREAK().self::set_multi_field_html_open_parents_tag($id, $class);

    $set_multifield_crownForm       = count($attr['labels']) - 1;

    for($crown_form_builder = 0; $crown_form_builder <= $set_multifield_crownForm; $crown_form_builder++) 
    {
    
    # CHECK_LABEL_MUST_THE_SAME_NUMBER_OF_CLASSES_AND_ID_ELSE_ERROR_REPORT
    $label            = $attr['labels'][$crown_form_builder];
    
    # CHECK_CHILD_ID_MUST_THE_SAME_NUMBER_OF_CLASSES_AND_ID_ELSE_ERROR_REPORT
    $child_id         = $attr['child_id'][$crown_form_builder];
    
    # CHECK_CHILD_CLASSES_MUST_THE_SAME_NUMBER_OF_CLASSES_AND_ID_ELSE_ERROR_REPORT    
    $child_class      = $attr['child_class'][$crown_form_builder];

    # CHECK_FORM_CHILD_CLASS_MUST_THE_SAME_NUMBER_OF_CLASSES_AND_ID_ELSE_ERROR_REPORT
    $child_form_class = $attr['child_form_class'][$crown_form_builder];

    $set_merge_html_multi_fields .= parent::_getOPENTAG().parent::$htm[6];

    $set_merge_html_multi_fields .= self::__get_id_crownform($child_id);

    $set_merge_html_multi_fields .= self::__get_class_crownform($child_class);

    $set_merge_html_multi_fields .= parent::_getCLOSETAG().parent::_getBREAK(); 

    $set_merge_html_multi_fields .= html::ELEMENT('LABEL',$label,NULL,NULL,NULL,NULL);    

    $set_merge_html_multi_fields .= self::fi_crown_form_builder_multi_fields_html_attr($attr, $child_form_class);    

    $set_merge_html_multi_fields .= parent::_getBREAK().html::__magicELEMENT('DIV','MAGIC_END', NULL, NULL, NULL);

    }
         
   $set_merge_html_multi_fields .= parent::_getBREAK().html::__magicELEMENT('DIV','MAGIC_END', NULL, NULL, NULL);

   return $set_merge_html_multi_fields;
  
   #  $attr = array(
   #         
   #         # REPLACE: 'type'=>'Select your input type html','name'=>'Your Field Name','placeholder'=>'Your Place Holder','label'=>'You label'
   #         'form_attr'   => array('type'=>'input','name'=>'name','placeholder'=>'pHolder'),
   #
   #         'child_id'         => array('id_a','id_b','id_c','new_id'),
   #         
   #         'child_class'      => array('class_a','class_b','class_c',''),
   #         
   #         'child_form_class' => array('class_fa','class_fb','class_fc',''),
   #
   #         'labels'           => array('label_a','label_b','label_c','Contact Name'),
   #    
   #         # REPLACE: name_1','name_2','name_3 & attr_1','attr_2','attr_3
   #         'custom_attr' => array( 
   #          
   #          'attr_name'  => array('name_1','name_2','name_3'),
   #          'attr_val'   => array('attr_1','attr_2','attr_3')
   #        
   #  )
   

   # Caling the function
   # field_multi_input($type, _my_attr(), 2, "child_class", 'parent_container_class')
    
   # OUTPUT:
   # <div id="crownPHPEXEND" class="parent_container_class">

      # <div id="id_1">
      # <label>
        # <input type="{$type}" custom_att1="val_att1" name="val1" placeholer="val1" class="child_class"/>
      # </label>
      # </div> 
   
      # <div id="id_2" >
      # <label>
        # <input type="{$type}" custom_att2="val_att2" name="val2" placeholer="val2" class="child_class"/>
      # </label>
      # </div> 

   #</div>
  }

	/**
	 ** @method Single form fields no loop
	 **/ 
	static public function field_single_textarea($name=null,$value=null,$placeholder=null,$label=null,$id=null,$class=null) {
   
     return self::__crown_form_builder('textarea',$name,$value,$placeholder,$label,$id,$class);  
  }

  /**
   ** @method  multi fields input loop and name attribute
   **/ 
  static public function field_textarea($attr=[],$id=null,$class=null) {
   
  # $attr = array(
  #     
  #     # REPLACE: 'type'=>'Select your input type html','name'=>'Your Field Name','placeholder'=>'Your Place Holder','label'=>'You label'
  #     'form_attr'    => array('type'=>'textarea','name'=>'name','placeholder'=>'pHolder','label'=>'My label'),
  #     
  #     # REPLACE: name_1','name_2','name_3 & attr_1','attr_2','attr_3
  #     'custom_attr'  => array( 
  #           
  #           'attr_name' => array('name_1','name_2','name_3'),
  #           'attr_val'  => array('attr_1','attr_2','attr_3')
  #         )
  # );

  # field_input($attr = [], $id, $class) 
  # html::_PERFORM(form::field_textarea($attr, '', 'my_class'));

    return self::fi_crown_form_builder_html_attr($attr,$id,$class);

  }

	/**
	 ** @method  multi fields input loop and attributes
	 **/ 
	static public function field_multi_textarea($attr = [], $id=null, $class=null) {
  
  $set_merge_html_multi_fields    = "";

    $set_merge_html_multi_fields   .= parent::_getBREAK().self::set_multi_field_html_open_parents_tag($id, $class);

    $set_multifield_crownForm       = count($attr['labels']) - 1;

    for($crown_form_builder = 0; $crown_form_builder <= $set_multifield_crownForm; $crown_form_builder++) 
    {
    
    # CHECK_LABEL_MUST_THE_SAME_NUMBER_OF_CLASSES_AND_ID_ELSE_ERROR_REPORT
    $label            = $attr['labels'][$crown_form_builder];
    
    # CHECK_CHILD_ID_MUST_THE_SAME_NUMBER_OF_CLASSES_AND_ID_ELSE_ERROR_REPORT
    $child_id         = $attr['child_id'][$crown_form_builder];
    
    # CHECK_CHILD_CLASSES_MUST_THE_SAME_NUMBER_OF_CLASSES_AND_ID_ELSE_ERROR_REPORT    
    $child_class      = $attr['child_class'][$crown_form_builder];

    # CHECK_FORM_CHILD_CLASS_MUST_THE_SAME_NUMBER_OF_CLASSES_AND_ID_ELSE_ERROR_REPORT
    $child_form_class = $attr['child_form_class'][$crown_form_builder];

    // CHECK FIELD
    // if ($attr['form_attr']['type'] === 'textarea' || $attr['form_attr']['type'] === 'TEXTAREA') 
    // {

    // $set_merge_html_multi_fields .= parent::_getOPENTAG().parent::$htm[17];   
    
    // } else {

    $set_merge_html_multi_fields .= parent::_getOPENTAG().parent::$htm[6];
    
    // }


    $set_merge_html_multi_fields .= self::__get_id_crownform($child_id);

    $set_merge_html_multi_fields .= self::__get_class_crownform($child_class);

    $set_merge_html_multi_fields .= parent::_getCLOSETAG().parent::_getBREAK(); 

    $set_merge_html_multi_fields .= html::ELEMENT('LABEL',$label,NULL,NULL,NULL,NULL);    

    $set_merge_html_multi_fields .= self::fi_crown_form_builder_multi_fields_html_attr($attr, $child_form_class);    

    $set_merge_html_multi_fields .= parent::_getBREAK().html::__magicELEMENT('DIV','MAGIC_END', NULL, NULL, NULL);

    }
         
    $set_merge_html_multi_fields .= parent::_getBREAK().html::__magicELEMENT('DIV','MAGIC_END', NULL, NULL, NULL);

   return $set_merge_html_multi_fields;
 
  }

	/**
	 ** @method  multi fields input loop and name attribute
	 **/ 
	static public function field_select() {
    

  }

	/**
	 ** @method Single form fields no loop
	 **/ 
	static public function field_select_single() {}

	/**
	 ** @method  multi fields input loop and name attribute
	 **/
	static public function field_multi_select() {}

	static public function field_submit() {}

	static public function field_button() {}

  static private function fi_crown_form_builder_html_attr($attr,$id,$class) {
    
     $set_fields = ""; 

     // array attr label 
     $label = $attr['form_attr']['label'];
    
     $set_fields .= html::ELEMENT('LABEL',$label,NULL,NULL,NULL,NULL);

    // CHECK FIELD
    if ($attr['form_attr']['type'] === 'textarea' || $attr['form_attr']['type'] === 'TEXTAREA') 
    {

     $set_fields .= parent::_getOPENTAG().parent::$htm[17];   
    
    } else {

     $set_fields .= parent::_getOPENTAG().parent::$htm_L[4];
    
    }
     
     $set_fields .= html::__magicELSE( $attr  == TRUE, self::defined_crowm_form_html_form_attr($attr), 'Attributes must be in array', 'FUNC_ASSOC');

     $set_fields .= html::__magicELSE( $attr  == TRUE, self::defined_crowm_form_custom_attr_name_attr_val($attr), 'Attributes must be in array', 'FUNC_ASSOC');

     $set_fields .= html::__magicELSE( $id    == TRUE, self::__get_id_crownform($id), "", 'FUNC_ASSOC');

     $set_fields .= html::__magicELSE( $class == TRUE, self::__get_class_crownform($class),"", 'FUNC_ASSOC');                   
     
     $set_fields .= parent::_getCLOSETAG().parent::_getBREAK(); 

    if ($attr['form_attr']['type'] === 'textarea' || $attr['form_attr']['type'] === 'TEXTAREA') 
    {

     $set_fields .= parent::_getOPENTAG().parent:: _getENDS().parent::$htm[17].parent::_getCLOSETAG().parent::_getBREAK();  
    
    }  

     return $set_fields;

  }

  static private function defined_crowm_form_html_form_attr($attr) {
     
    $get_array_data = [];
           
    foreach ($attr['form_attr'] as $form_attr ) 
    {
     
        $get_array_data[] =  $form_attr; 
    }
      
    list($type, $name, $place_holder, $label) = $get_array_data;
    
    $setHTML_attr = "";
    
    // CHECK TYPE
    if ($attr['form_attr']['type'] === 'textarea' || $attr['form_attr']['type'] === 'TEXTAREA') 
    {
      $setHTML_attr .= "";
    
    } else {

      $setHTML_attr .= self::__get_type_crownform($type);
    }
    
      $setHTML_attr .= self::__get_name_crownform($name);

      $setHTML_attr .= self::__get_placeholder_crownform($place_holder).parent::_tagSPACER();   

    return $setHTML_attr;
  
  }  

  static private function defined_crowm_form_html_form_attr_multi_fields($attr) {
     
    $get_array_data = [];
           
    foreach ($attr['form_attr'] as $form_attr ) 
    {
     
        $get_array_data[] =  $form_attr; 
    }
      
    list($type, $name, $place_holder ) = $get_array_data;
    
    $setHTML_attr = "";

    $setHTML_attr .= self::__get_type_crownform($type);

    $setHTML_attr .= self::__get_name_crownform($name);

    $setHTML_attr .= self::__get_placeholder_crownform($place_holder).parent::_tagSPACER();   

    return $setHTML_attr;
  
  }  

  static private function defined_crowm_form_custom_attr_name_attr_val($attr) {
      
   $merge_array = array_combine($attr['custom_attr']['attr_name'], $attr['custom_attr']['attr_val']);

   $get_array_data = [];
           
    foreach ($merge_array as $attr_name => $attr_val) 
    {
     
        $get_array_data[] = $attr_name.parent::_getES().parent::_getDQUOTE().$attr_val.parent::_getDQUOTE(); 
    }
      
    return implode(' ', $get_array_data);
 
  } 

 static private function set_multi_field_html_open_parents_tag($id,$class) {
    
    $set_multi_fields  = "";

    $set_multi_fields .= parent::_getOPENTAG().parent::$htm[6];

    $set_multi_fields .= html::STRING(" for=\"crownPHPEXEND_v1\"","FUNC_ASSOC");
  
    $set_multi_fields .= html::__magicELSE( $id    == TRUE, self::__get_id_crownform($id), "", 'FUNC_ASSOC');

    $set_multi_fields .= html::__magicELSE( $class == TRUE, self::__get_class_crownform($class),"", 'FUNC_ASSOC');                   
    
    $set_multi_fields .= parent::_getCLOSETAG().parent::_getBREAK(); 
    
    return $set_multi_fields;

 }

 static private function fi_crown_form_builder_multi_fields_html_attr($attr, $child_form_class) {
    
     $multi_fields_loop = ""; 

    // CHECK FIELD
    if ($attr['form_attr']['type'] === 'textarea' || $attr['form_attr']['type'] === 'TEXTAREA') 
    {

     $multi_fields_loop .= parent::_getOPENTAG().parent::$htm[17];   
    
    } else {

     $multi_fields_loop .= parent::_getOPENTAG().parent::$htm_L[4];
    
    } 

     $multi_fields_loop .= self::__get_class_crownform($child_form_class);

     $multi_fields_loop .= self::defined_crowm_form_html_form_attr_multi_fields($attr);
                     
     $multi_fields_loop .= parent::_tagSPACER().self::defined_crowm_form_custom_attr_name_attr_val($attr);
     
     $multi_fields_loop .= parent::_getCLOSETAG().parent::_getBREAK(); 

    if ($attr['form_attr']['type'] === 'textarea' || $attr['form_attr']['type'] === 'TEXTAREA') 
    {

     $multi_fields_loop .= parent::_getOPENTAG().parent:: _getENDS().parent::$htm[17].parent::_getCLOSETAG().parent::_getBREAK();  
    
    } 

     return $multi_fields_loop;
  }

  static private function __crown_form_builder($type,$name,$placeholder,$value,$label,$id,$class) {
    
    $set_fields = ""; 
    
    if (class_exists('html',true) && $label == TRUE ) 
    {
      $set_fields .= html::ELEMENT('LABEL',$label,NULL,NULL,NULL,NULL); 
    }
    
    if ($type === 'textarea' || $type === 'TEXTAREA') 
    {

      $set_fields .= parent::_getOPENTAG().parent::$htm[17];      
    
    } else {

      $set_fields .= parent::_getOPENTAG().parent::$htm_L[4];
    }

    if (class_exists('html',true) && $type == NULL ) 
    {
       html::_PERFORM(" Input type=\"required\" | ex. text, radio, etc... ");
   
    } else {
      
        // CHECK TYPE
        if ($type === 'textarea' || $type === 'TEXTAREA') 
        {
          $set_fields .= "";
        
        } else {

          $set_fields .= self::__get_type_crownform($type);

        }

    }

    if (class_exists('html',true) && $name == NULL) 
    {
       html::_PERFORM(" Input name=\"required_\" | to get SQL Query result etc... ");       
   
    } else {

      $set_fields .= self::__get_name_crownform($name);      
    }    

    if (class_exists('html',true) && $value == TRUE ) 
    {
       $set_fields .= self::__get_value_crownform($value);       
    }

    if (class_exists('html',true) && $placeholder == TRUE ) 
    {
       $set_fields .= self::__get_placeholder_crownform($placeholder);       
    } 

    if (class_exists('html',true) && $id == TRUE ) 
    {
       $set_fields .= self::__get_id_crownform($id);       
    } 

    if (class_exists('html',true) && $class == TRUE ) 
    {
       $set_fields .= self::__get_id_crownform($class);       
    }              
     
    $set_fields .= parent::_getCLOSETAG().parent::_getBREAK(); 

    if ($type === 'textarea' || $type === 'TEXTAREA') {

       $set_fields .= parent::_getOPENTAG().parent:: _getENDS().parent::$htm[17].parent::_getCLOSETAG().parent::_getBREAK(); 
    }

     return $set_fields;
  }

  static private function __get_type_crownform($type_) {
    
    return parent::_tagSPACER().self::DEFINED_FIELD_AS_ATTR_TYPE.parent::_getES().parent::_getDQUOTE().$type_.parent::_getDQUOTE();  
  }
  
  static private function __get_name_crownform($name_) {
 
    return parent::_tagSPACER($name_).self::DEFINED_FIELD_AS_ATTR_NAME.parent::_getES().parent::_getDQUOTE().$name_.parent::_getDQUOTE();
  }
  
  static private function __get_value_crownform($value_) {

    return parent::_tagSPACER().self::DEFINED_FIELD_AS_ATTR_VALUE.parent::_getES().parent::_getDQUOTE().$value_.parent::_getDQUOTE();
  }  

  static private function __get_placeholder_crownform($placeholder_) {

    return parent::_tagSPACER().self::DEFINED_FIELD_AS_ATTR_PLACEHOLDER.parent::_getES().parent::_getDQUOTE().$placeholder_.parent::_getDQUOTE();
  }
 
  static private function __get_id_crownform($id_) {
     
    return parent::_tagSPACER().self::DEFINED_FIELD_AS_ATTR_ID.parent::_getES().parent::_getDQUOTE().$id_.parent::_getDQUOTE();
    
  } 

  static private function __get_class_crownform($class_) {

    return parent::_tagSPACER().self::DEFINED_FIELD_AS_ATTR_CLASS.parent::_getES().parent::_getDQUOTE().$class_.parent::_getDQUOTE();
  }  


 /**
  **
  ** @var Method create open FORM html default
  ** STRING $action = null/process
  ** STRING $method = null/get|post
  ** STRING $upload = null/file [to set upload]
  ** STRING $accpet_charset = null/ [defualt] = utf-8;
  **
  ** CROWN PHP Framework dynamic php form Library
  ** cooked by nielsoffice
  **   
  **/
 # action | form html action where data process
 # method | form get/Post
 # upload | Bool: True or false / 'UPLOAD' empty false
 # Data type | $accpet_charset
 static public function FORMBEGIN( STRING $action = null, STRING $method = null,  STRING $upload = null,  STRING $accpet_charset = 'utf-8', $id=null, $class=null) {
  
    $fa  = (string) $action; 
    $fm  = (string) $method; 
    $fac = (string) $accpet_charset;

    if ($action == NULL || $action == " " ) {
      
      $errors = self::msg_action_error();
      html::_PERFORM($errors);
    
    } else {
      
    // Create a condition to return if it is a self or page to process form
    // IF action == SELF then header form self
    // ELSE action == 'page_name' THEN header action ="process.php";
    if ($action === 'SELF' ) { $action = 'SELF'; } 
    
    switch ($action) {
    case 'SELF':

    return self::_setFORM($action, $method, $upload, $accpet_charset, $id, $class);   
    break;

    default:

        // Check if the form has file type uploads return enctype
        // ELSE return form no file uploads
        if(self::DEFINED_FIELD_AS_TYPE_UPLOAD === strtolower($upload) ) 
         {

           // Return form upload
           return $form_upload = self::form_upload($fa, $fm, $fac,$id,$class);      

         } else {

           // Regular Static Form w/out File Upload 
           return $form_self   = self::form_self($fa, $fm, $fac,$id,$class); 
       
         }
   
    break;
   
      }
     
    }
    
} # END OF BEGIN METHOD

 /**
  ** @method field_input HTML
  ** Validate field input for 
  ** 'text'  'number' | 'search' | 'checkbox' | 'radio' | 'time' | 'date' | 'datetime' | 'datetime-local' | 'month' | 'week' | 
  ** 'color' | 'rage' | 'url' | 'email' | 'password' | 'file' | 'hidden' | 'button' | 'submit' | 'disabled'
  ** $type = the field like text, date, password etc.. by default NULL, $label = the form input label by default is NULL, 
  ** $name = the form name for processing data by default NULL, $nprefix = name prefix for field name by default NULL, $nsuffix = UFFIX NULL by default, 
  ** $value = form value HTML by default NULL, $placeholder = the HTML placehiolder by defualt NULL, 
  ** $parent_class = the div class parent for style, $label_class = class for style, $add_class = class field HTML 
  **/

 // multi fields input loop and label array name attribute
 static public function field_input_(int $loop = null, $type = null, $label = null, $name = null, $value = null, $placeholder = null, $parent_class = null, $label_class = null, $add_class = null ) {
  
  
  $fit    = (string) $type; 
  $fil    = (string) $label; 
  $fin    = (string) $name;
  $filsfx = (int)    $loop;
  $fiv    = (string) $value; 
  $fip    = (string) $placeholder; 
  $fipc   =          $parent_class; 
  $filc   =          $label_class; 
  $fiac   =          $add_class;
  
  // VALIDATE FORM FIELD TYPE  RETURN HTMLBASE ON === TYPE
  if ( ( ($type == '' || $type == NULL) || (!is_string($type)) || (    

       $type != self::DEFINED_FIELD_AS_TYPE_TEXT        && $type != self::DEFINED_FIELD_AS_TYPE_NUMBER 
    && $type != self::DEFINED_FIELD_AS_TYPE_SEARCH      && $type != self::DEFINED_FIELD_AS_TYPE_CHECKBOX 
    && $type != self::DEFINED_FIELD_AS_TYPE_RADIO       && $type != self::DEFINED_FIELD_AS_TYPE_TIME
    && $type != self::DEFINED_FIELD_AS_TYPE_DATE        && $type != self::DEFINED_FIELD_AS_TYPE_DATETIME
    && $type != self::DEFINED_FIELD_AS_TYPE_DTIME_LOCAL && $type != self::DEFINED_FIELD_AS_TYPE_MONTH
    && $type != self::DEFINED_FIELD_AS_TYPE_WEEK        && $type != self::DEFINED_FIELD_AS_TYPE_COLOR
    && $type != self::DEFINED_FIELD_AS_TYPE_RAGE        && $type != self::DEFINED_FIELD_AS_TYPE_URL  
    && $type != self::DEFINED_FIELD_AS_TYPE_EMAIL       && $type != self::DEFINED_FIELD_AS_TYPE_PASSWORD
    && $type != self::DEFINED_FIELD_AS_TYPE_UPLOAD      && $type != self::DEFINED_FIELD_AS_TYPE_SUBMIT
    && $type != self::DEFINED_FIELD_AS_TYPE_BUTTON      && $type != self::DEFINED_FIELD_AS_TYPE_DISABLE
    && $type != self::DEFINED_FIELD_AS_TYPE_HIDDEN
 
    ) ) ||  ($label == '' || $label == NULL) )
     
  {
        /**
         ** THEN validate if the field are submit OR Button
         ** IF the fields are SUBMIT label allow to be EMPTY or NULL 
         **/
        if (($type === 'submit' && $label == NULL) || ($type === 'button' && $label == NULL ) ) 
        {
          
          $label = '';
          echo self::return_fields_input($fit, $fil, $fin, $lsfx = NULL, $fiv, $fip, $fipc, $filc, $fiac);  
               
        } else {

          // ELSE return error FROM validate input for
          $errors = self::msg_field_error();
          return $errors;
        }
 
  } else {
    
      /**
       ** IF there are NO SUBMIT or BUTTON fields 
       ** THEN return all type of field require label! 
       **/
       $multiReturn_input  = "";
       $multiReturn_input .= "<div id=\"crownPHPFramework_formbuilder\" class=\"{$fiac}\">\n";

       for($multi_input = 1; $multi_input <= $filsfx; $multi_input++) {
         
           $multiReturn_input .= self::return_fields_input($fit, $fil, $fin, $multi_input, $fiv, $fip, $fipc, $filc, $fiac);  

        }
         
      $multiReturn_input .= "</div>\n";
      
      echo $multiReturn_input;
   
  } # END OF ELSE VALIDATION FIELDS FOR

 } #END OF METHOD FIELD_INPUT();


// $type = field type, $label = field label, $name = field name, $loopsfx = field name prefix, 
// $value = field value , $placeholder = field placeholder, $parent_class = parent class html , 
// $label_class child class html, $add_class
static private function return_fields_input($type, $label, $name, $loopsfx, $value, $placeholder, $parent_class, $label_class) {

    // Check if parent form container has class
    // THEN return class 
    if ($parent_class == TRUE ) 
    {
      
      $parent = "class=\"crownf {$parent_class}\" ";     
      $html   = "<div {$parent}>\n";     
    
    } else {
      // ELSE empty
      $html  = "<div>\n"; 
    
    }
    // Check if label form container has class
    // THEN return class
    if ($label_class == TRUE ) 
    {
    
      $child = "class=\"crownf {$label_class}\" "; 
      $html .= "<label {$child} >".self::_getLABEL($label)."</label>\n";
    
    } else {
      // ELSE empty
      $html .= "<label>".self::_getLABEL($label)."</label>\n"; 
    
    }

      $html .= "<input type=\"".self::_getTYPE($type)."\"";
      if ($loopsfx == TRUE ) {
      $html .= " name=\"".self::_getNAME($name)."_".self::_getLOOP($loopsfx)."\"";
      } else {
      $html .= " name=\"".self::_getNAME($name)."\"";
      }     
      $html .= " value=\"".self::_getVALUE($value)."\" ";
      $html .= " placeholder=\"".self::_getPLACEHOLDER($placeholder)."\">\n";
      $html .= "</div>\n";

      return  $html;
}
 
/**
 ** @method set HTML field type
 ** set field name HTML
 ** $name = field name
 **/
static private function _getNAME($name) { 
   return self::_name($name);
} 

/**
 ** @method set HTML field type
 ** set field value HTML
 ** $value = field value
 **/
static private function _getVALUE($value) { 
   return self::_value($value);
} 

/**
 ** @method set HTML field type
 ** set field type HTML
 ** $type = text, radio, date etc..
 **/
static private function _getTYPE($type) { 
   return self::_type($type);
} 

/**
 ** @method set HTML field type
 ** set field placeholder HTML
 ** $placeholder = field placeholder
 **/
static private function _getPLACEHOLDER($placeholder) { 
   return self::_placeholder($placeholder);
} 

/**
 ** @method set HTML field type
 ** set field label tag
 ** $label = html tag
 **/
static private function _getLABEL($label) { 
   return self::_label($label);
} 

/**
 ** @method set HTML field multi loop name and fields++
 ** set field label tag
 ** $name and loop = html tag
 **/
static private function _getLOOP($loopsfx) {

   return  self::_loopsfx($loopsfx);
}

/**
 ** Check if the file is with file upload
 ** THEN return TRUE run the functionh?
 **/
static protected function form_upload($a, $m, $ac, $id,$class) {

 return  self::_begin_set_form($array_elem = 14)
        
        .self::_set_form_attr_hextend_a().parent::_getES()
        .parent::_getDQUOTE()."{$a}.php".parent::_getDQUOTE()

        .parent::_tagSPACER().self::_set_form_attr_hextend_m().parent::_getES()
        .parent::_getDQUOTE()."{$m}".parent::_getDQUOTE()

        .parent::_tagSPACER().self::_set_form_attr_hextend_ac().parent::_getES()
        .parent::_getDQUOTE()."{$ac}".parent::_getDQUOTE()
        
        .parent::_tagSPACER().self::_set_form_attr_hextend_e().parent::_getES()
        .parent::_getDQUOTE()."multipart/form-data".parent::_getDQUOTE().self::_form_dom_selectors($id,$class).parent::_getCLOSETAG().parent::_getBREAK();  

}

/**
 ** Check if the file is without file upload
 ** THEN return TRUE run the function
 **/
static protected function form_self($a, $m, $ac, $id,$class) {

  return self::_begin_set_form($array_elem = 14)
        
        .self::_set_form_attr_hextend_a().parent::_getES()
        .parent::_getDQUOTE()."{$a}.php".parent::_getDQUOTE()
        
        .parent::_tagSPACER().self::_set_form_attr_hextend_m().parent::_getES()
        .parent::_getDQUOTE()."{$m}".parent::_getDQUOTE()
        
        .parent::_tagSPACER().self::_set_form_attr_hextend_ac().parent::_getES()
        .parent::_getDQUOTE()."{$ac}".parent::_getDQUOTE().parent::_getCLOSETAG().self::_form_dom_selectors($id,$class).parent::_getBREAK();

}


 /**
  ** @var Method create CLOSED FORM html default
  ** CROWN PHP Framework dynamic php form Library
  ** cooked by nielsoffice   
  **/
 static public function FORMEND($assoc = null ) {
   
   if ( $assoc == NULL || $assoc === 'DEFAULT') 
   {
     html::_PERFORM(parent::_getOPENTAG().parent::_getENDS().parent::$htm[14].parent::_getCLOSETAG().parent::_getBREAK()); 
   } 
    # FUNC_ASSOC | METHOD_ASSOC | CLASS_ASSOC _THEN_SET_RETURN
   elseif ($assoc === 'FUNC_ASSOC' || $assoc === 'METHOD_ASSOC' || $assoc === 'CLASS_ASSOC') 
   {
     return parent::_getOPENTAG().parent::_getENDS().parent::$htm[14].parent::_getCLOSETAG().parent::_getBREAK();   
   } 
   
 }

/**
 ** @method return error message for fields form HTML
 ** @SET which field will display for HTML form?
 **/
static private function msg_field_error() {
  
 return html::P("Defined Form Field Type = \" \" ? <br /> Missing Form Label <br /> <i>Must be string!</i>", NULL,'','form_msg_error','','FUNC_ASSOC');

}

/**
 ** @method return error message for action header form HTML
 ** @SET Where form action goes through?
 **/
static private function msg_action_error() {
  
  return html::P("What action=\"\" goes?... <br /> Missing action in form header <br /> <i>Must be string!</i> ", NULL,'','form_msg_error','','FUNC_ASSOC');

}

###########################################################################
/**
 ** @method get File/Required
 ** set field name HTML
 ** $name = field name
 **/
private static function __getFILE($file_address) {
   
  return require_once '{$file_address}';
 
}  
 
static private function _setFORM($action=null,$method=null,$upload = null,$accpet_charset=null, $id=null,$class=null) {

return  self::_begin_set_form($array_elem = 14).self::_set_self_method().self::_begin_form_attr($method).self::_begin_form_attr_ac($accpet_charset,$upload,$id,$class);
}


static private function _begin_form_attr_ac($accpet_charset,$upload,$id,$class) {
 
 return  parent::_tagSPACER().self::_set_form_attr_hextend_ac().parent::_getES()
        .parent::_getDQUOTE()."{$accpet_charset}".parent::_getDQUOTE().parent::_tagSPACER().self::_form_condition($upload,$id,$class); 
} 

static private function _begin_form_attr($method) {

 return  parent::_tagSPACER().self::_set_form_attr_hextend_m().parent::_getES()
        .parent::_getDQUOTE()."{$method}".parent::_getDQUOTE();

}

static private function _begin_set_form($array_elem = null) {

   return parent::_getOPENTAG().parent::$htm[$array_elem].parent::_tagSPACER();

}

static private function _set_self_method() {

 return self::_set_form_attr_hextend_a().parent::_getES()
        .parent::_getDQUOTE()."{$_SERVER['PHP_SELF']}".parent::_getDQUOTE();
}

static private function _form_condition($upload,$id,$class) {

  if ($upload == TRUE ) 
  { 
    return parent::_tagSPACER().self::_set_form_attr_hextend_e().parent::_getES()
          .parent::_getDQUOTE()."multipart/form-data".parent::_getDQUOTE().self::_form_dom_selectors($id,$class).parent::_getCLOSETAG().parent::_getBREAK();           
   
   } else {

   return  self::_form_dom_selectors($id,$class).parent::_getCLOSETAG().parent::_getBREAK();   
  } 

} 

static private function _form_dom_selectors($id,$class) {

  if ( $id == TRUE && $class == TRUE ) 
  {
  
   return parent::_tagSPACER().self::form_dom_id($id)." ".self::form_dom_class($class).parent::_tagSPACER();  
  } 
  elseif (  $id == TRUE && $class == FALSE ) 
  {
  
    return parent::_tagSPACER().self::form_dom_id($id).parent::_tagSPACER();
  } 
  elseif ( $id == FALSE && $class == TRUE) 
  {

    return parent::_tagSPACER().self::form_dom_class($class).parent::_tagSPACER();
  } elseif ( $id == FALSE && $class == FALSE)  {
    return "";
  }

}

static private function form_dom_id($id) {
  return "id".parent::_getES().parent::_getDQUOTE().$id.parent::_getDQUOTE();
}

static private function form_dom_class($class) {
  return "class".parent::_getES().parent::_getDQUOTE().$class.parent::_getDQUOTE();
} 


static private function _set_form_attr_hextend_a()  { 

  return parent::$hextend[] = 'action'; 
}

static private function _set_form_attr_hextend_m()  { 

  return parent::$hextend[] = 'method'; 
}

static private function _set_form_attr_hextend_ac() { 

  return parent::$hextend[] = 'accept-charset'; 
}

static private function _set_form_attr_hextend_e()  { 

  return parent::$hextend[] = 'enctype'; 
}

} # END OF CLASS


# USAGE:
# BEGIN FORM
# SEND TO NULL cannot be empty FORMBEGIN!
# SEND TO 'SELF' $_SERVER['PHP_SELF'] BY DEFAULT
# SEND TO page optional | page_process.php
# BEGIN(STRING $action = 'SELF', STRING $method = post/get,  STRING $upload = null/optional,  STRING $accpet_charset = 'utf-8') 
# crownf_php_forms::FORMBEGIN($a = 'process', $m = 'post', $ul = ''); 

# USAGE:
# END FORM
# rownf_php_forms::FORMEND();


